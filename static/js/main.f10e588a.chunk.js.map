{"version":3,"sources":["views/MDPreview.tsx","common/const.ts","extensions/markdown/index.tsx","extensions/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MDPreview","connect","molecule","editor","groups","mdGroup","find","group","id","mdText","tab","data","value","className","text","mdEditor","name","closable","language","previewTab","renderPane","extensions","extensionCtx","a","open","layout","toggleMenuBarVisibility","togglePanelVisibility","toggleSidebarVisibility","toggleActivityBarVisibility","Error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAiBeA,EAVGC,kBAAQC,IAASC,QAAQ,YAA4B,IAAD,QAAfC,OAC7CC,QAD4D,MAAN,GAAM,GAC3CC,MAAK,SAACC,GAAD,OAAgBA,EAAMC,GCRjB,MDQwC,GACnEC,GAAgB,OAAPJ,QAAO,IAAPA,GAAA,UAAAA,EAASK,WAAT,mBAAcC,YAAd,eAAoBC,QAAS,GAC5C,OACI,qBAAKC,UAAU,aAAf,SACI,cAAC,IAAD,CAAgBC,KAAML,SEL5BM,EAAW,CACbP,GAAI,IACJQ,KAAM,WACNC,UAAU,EACVN,KAAM,CACFO,SAAU,aAGZC,EAAyB,CAC3BX,GAAI,IACJQ,KAAM,UACNC,UAAU,EACVG,WAAY,WACR,OAAO,cAAC,EAAD,MCfAC,EAFkB,CAAC,I,iDDsB9Bb,GAAa,c,KACbQ,KAAe,c,mFAEf,WAAeM,GAAf,SAAAC,EAAA,sDACIrB,IAASC,OAAOqB,KAAKT,ED7BQ,GC8B7Bb,IAASC,OAAOqB,KAAKL,ED7BS,GC+B9BjB,IAASuB,OAAOC,0BAChBxB,IAASuB,OAAOE,wBAChBzB,IAASuB,OAAOG,0BAChB1B,IAASuB,OAAOI,8BAPpB,2C,4EAoBA,SAAQP,GACJ,MAAM,IAAIQ,MAAM,+B,OEpCTC,MARf,WACI,OACI,cAAC,IAAD,CAAkBV,WAAYA,EAA9B,SACI,cAAC,IAAD,OCMGW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f10e588a.chunk.js","sourcesContent":["import React from 'react';\nimport { MarkdownRender } from 'dt-react-component';\nimport './style.css';\nimport { connect } from '@dtinsight/molecule/esm/react';\nimport molecule from '@dtinsight/molecule';\nimport { LEFT_PANEL_ID } from '../common/const';\n\nconst MDPreview = connect(molecule.editor, function ({ groups = [] }) {\n    const mdGroup = groups.find((group: any) => group.id = LEFT_PANEL_ID) || {};\n    const mdText = mdGroup?.tab?.data?.value || '';\n    return (\n        <div className=\"md-preview\">\n            <MarkdownRender text={mdText} />\n        </div>\n    );\n});\n\nexport default MDPreview;\n\n","export const LEFT_PANEL_ID: number = 1;\nexport const RIGHT_PANEL_ID: number = 2;","import molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\nimport { IEditorTab } from '@dtinsight/molecule/esm/model';\nimport MDPreview from '../../views/MDPreview';\nimport { LEFT_PANEL_ID, RIGHT_PANEL_ID } from '../../common/const';\n\nconst mdEditor = {\n    id: '1',\n    name: 'Markdown',\n    closable: false,\n    data: {\n        language: 'markdown',\n    },\n};\nconst previewTab: IEditorTab = {\n    id: '2',\n    name: 'Preview',\n    closable: false,\n    renderPane: () => {\n        return <MDPreview />;\n    },\n};\n\nexport default class MDExtension implements IExtension {\n    id: string = 'MDExtension';\n    name: string = 'MDExtension';\n\n    async activate(extensionCtx: IExtensionService) {\n        molecule.editor.open(mdEditor, LEFT_PANEL_ID);\n        molecule.editor.open(previewTab, RIGHT_PANEL_ID);\n\n        molecule.layout.toggleMenuBarVisibility();\n        molecule.layout.togglePanelVisibility();\n        molecule.layout.toggleSidebarVisibility();\n        molecule.layout.toggleActivityBarVisibility();\n\n        // const editor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n        //     (resolve) => {\n        //         setTimeout(() => resolve(molecule.editor.getGroupById(1)?.editorInstance));\n        //     }\n        // );\n\n        // editor.onDidChangeModelContent(() => {\n        //     const value = editor.getValue();\n        // });\n\n    }\n    dispose(extensionCtx: IExtensionService): void {\n        throw new Error('Method not implemented.');\n    }\n\n}\n\n","import { IExtension } from '@dtinsight/molecule/esm/model';\nimport MDExtension from './markdown';\n\nconst extensions: IExtension[] = [new MDExtension()];\n\nexport default extensions;\n\n","import React from 'react';\nimport { MoleculeProvider, Workbench } from '@dtinsight/molecule';\nimport '@dtinsight/molecule/esm/style/mo.css';\nimport extensions from './extensions';\n\nfunction App() {\n    return (\n        <MoleculeProvider extensions={extensions}>\n            <Workbench />\n        </MoleculeProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}